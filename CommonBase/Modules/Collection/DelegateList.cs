//@BaseCode
//MdStart
using CommonBase.Extensions;
using System.Collections;

namespace CommonBase.Modules.Collection
{
    /// <summary>
    /// Represents a list that is built upon an inner list and uses conversion functions to convert between
    /// the items in the inner list and the items in the output list. The inner list is the source of items for
    /// the DelegateList, and the output list is created by applying the conversion function to each item in the
    /// inner list. The DelegateList provides functionality to access and manipulate the items in the
    /// output list while keeping the inner list in sync with the changes made to the output list.
    /// </summary>
    /// <typeparam name="TInnerModel">The type of the inner models.</typeparam>
    /// <typeparam name="TOutModel">The type of the outer models.</typeparam>
    public partial class DelegateList<TInnerModel, TOutModel> : IList<TOutModel>
            where TInnerModel : class, new()
            where TOutModel : class, new()
    {
        #region Fields
        private readonly List<TInnerModel> _innerList;
        private readonly List<TOutModel> _outerList;

        private readonly Func<TInnerModel, TOutModel> _toOutModel;
        private readonly Func<TOutModel, TInnerModel> _toInnerModel;
        #endregion Fields

        #region Properties
        /// <summary>
        /// Gets or sets the function used to convert an inner model object to an outer model object.
        /// </summary>
        /// <typeparam name="TInnerModel">The type of the inner model object.</typeparam>
        /// <typeparam name="TOutModel">The type of the outer model object.</typeparam>
        /// <value>
        /// The function used to convert an inner model object to an outer model object.
        /// </value>
        public Func<TInnerModel, TOutModel> ToOutModel => _toOutModel;
        /// <summary>
        /// Converts an instance of type <typeparamref name="TOutModel"/> to an instance of type <typeparamref name="TInnerModel"/>.
        /// </summary>
        /// <param name="model">The instance of type <typeparamref name="TOutModel"/> to be converted.</param>
        /// <returns>The converted instance of type <typeparamref name="TInnerModel"/>.</returns>
        public Func<TOutModel, TInnerModel> ToInnerModel => _toInnerModel;
        #endregion Properties

        #region Constructors
        /// <summary>
        /// This method is called when the object is being constructed.
        /// </summary>
        /// <remarks>
        /// This is a partial method, which means the implementation is generated by the compiler if any partial class declares it.
        /// </remarks>
        partial void Constructing();
        /// <summary>
        /// This method is a partial method which is intended to be implemented in a partial class or struct.
        /// It is called when the class or struct that contains the partial method is constructed.
        /// </summary>
        /// <remarks>
        /// Partial methods enable you to add additional implementation details to a class or struct without having to modify its source code.
        /// They must be implemented in a separate part of the class or struct definition.
        /// This method can be defined multiple times in the same class or struct, but only one implementation is allowed.
        /// </remarks>
        /// <returns>
        /// This method does not return anything.
        /// </returns>
        partial void Constructed();

        /// <summary>
        /// Creates a new instance of the DelegateList class with the specified inner list.
        /// </summary>
        /// <param name="innerList">The list containing the inner models.</param>
        /// <typeparam name="TInnerModel">The type of the inner models.</typeparam>
        public DelegateList(List<TInnerModel> innerList)
        {
            Constructing();
            _innerList = innerList;
            _toOutModel = ToDefaultOutModel;
            _toInnerModel = ToDefaultInnerModel;
            _outerList = innerList.Select(e => _toOutModel(e)).ToList();
            Constructed();
        }

        /// <summary>
        /// Initializes a new instance of the DelegateList class.
        /// </summary>
        /// <param name="innerList">The inner list containing elements of type TInnerModel.</param>
        /// <param name="toOutModel">The function to convert elements of type TInnerModel to TOutModel.</param>
        public DelegateList(List<TInnerModel> innerList, Func<TInnerModel, TOutModel> toOutModel)
        {
            Constructing();
            _innerList = innerList;
            _toOutModel = toOutModel;
            _toInnerModel = ToDefaultInnerModel;
            _outerList = innerList.Select(e => _toOutModel(e)).ToList();
            Constructed();
        }

        /// <summary>
        /// Initializes a new instance of the DelegateList class with the specified inner list, conversion functions.
        /// </summary>
        /// <param name="innerList">The inner list to use as the source of items.</param>
        /// <param name="toOutModel">A function that converts an item from inner list to its corresponding output model.</param>
        /// <param name="toInnerModel">A function that converts an item from output model to its corresponding inner list item.</param>
        /// <remarks>
        /// The DelegateList represents a list that is built upon an inner list and uses conversion functions to convert between
        /// the items in the inner list and the items in the output list. The inner list is the source of items for the DelegateList,
        /// and the output list is created by applying the conversion function to each item in the inner list. The DelegateList
        /// provides functionality to access and manipulate the items in the output list while keeping the inner list in sync
        /// with the changes made to the output list.
        /// </remarks>
        public DelegateList(List<TInnerModel> innerList, Func<TInnerModel, TOutModel> toOutModel,
        Func<TOutModel, TInnerModel> toInnerModel)
        {
            Constructing();
            _innerList = innerList;
            _toOutModel = toOutModel;
            _toInnerModel = toInnerModel;
            _outerList = innerList.Select(e => _toOutModel(e)).ToList();
            Constructed();
        }
        #endregion Constructors

        #region Implement IList<>
        public TOutModel this[int index]
        {
            get => _outerList[index];
            set
            {
                _outerList[index] = value;
                _innerList[index] = _toInnerModel(value);
            }
        }

        /// Gets the number of elements contained in the inner list.
        /// @return The number of elements in the inner list.
        public int Count => _innerList.Count;
        ///<summary>
        ///Gets a value indicating whether the collection is read-only.
        ///</summary>
        ///<returns>
        ///Always returns false.
        ///</returns>
        public bool IsReadOnly => false;

        /// <summary>
        /// Creates an instance of the specified output model.
        /// </summary>
        /// <returns>A new instance of the specified output model.</returns>
        /// <remarks>
        /// This method creates an instance of the specified output model by converting a new instance of the inner model using the provided conversion function.
        /// </remarks>
        /// <typeparam name="TOutModel">The type of the output model.</typeparam>
        /// <typeparam name="TInnerModel">The type of the inner model.</typeparam>
        /// <param name="conversionFunction">The conversion function used to convert the inner model to the output model.</param>
        /// <returns>A new instance of the specified output model.</returns>
        public TOutModel Create() => _toOutModel(new TInnerModel());

        /// <summary>
        /// Adds an item to the collection.
        /// </summary>
        /// <param name="item">The item to add.</param>
        public void Add(TOutModel item)
        {
            _innerList.Add(_toInnerModel(item));
            _outerList.Add(item);
        }

        /// <summary>
        /// Clears the contents of the inner and outer list.
        /// </summary>
        public void Clear()
        {
            _innerList.Clear();
            _outerList.Clear();
        }

        /// <summary>
        /// Determines whether the specified item exists in the outer list.
        /// </summary>
        /// <param name="item">The item to check.</param>
        /// <returns>True if the item exists in the outer list; otherwise, false.</returns>
        public bool Contains(TOutModel item)
        {
            return _outerList.Contains(item);
        }

        ///<summary>
        /// Copies the elements of the collection to an array, starting at a particular index.
        ///</summary>
        ///<param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
        ///<param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        public void CopyTo(TOutModel[] array, int arrayIndex)
        {
            _outerList.CopyTo(array, arrayIndex);
        }

        /// Returns an enumerator that iterates through the collection.
        /// @returns An enumerator that can be used to iterate through the collection.
        public IEnumerator<TOutModel> GetEnumerator()
        {
            return _outerList.GetEnumerator();
        }

        /// Returns the zero-based index of the first occurrence of the specified item in the list.
        /// @param item The item to locate in the list.
        /// @return The zero-based index of the first occurrence of the specified item, if found; otherwise, -1.
        public int IndexOf(TOutModel item)
        {
            return _outerList.IndexOf(item);
        }

        /// <summary>
        /// Inserts the specified item at the specified index in the lists.
        /// </summary>
        /// <param name="index">The zero-based index at which the item should be inserted.</param>
        /// <param name="item">The item to insert.</param>
        /// <remarks>
        /// This method inserts the specified <paramref name="item"/> at the specified <paramref name="index"/> in both the inner and outer lists.
        /// </remarks>
        public void Insert(int index, TOutModel item)
        {
            _innerList.Insert(index, _toInnerModel(item));
            _outerList.Insert(index, item);
        }

        /// <summary>
        /// Removes the specified item from the list and returns a value indicating whether the item was successfully removed.
        /// </summary>
        /// <param name="item">The item to remove from the list.</param>
        /// <returns>True if the item was successfully removed; otherwise, false.</returns>
        public bool Remove(TOutModel item)
        {
            var index = _outerList.IndexOf(item);

            if (index >= 0)
            {
                RemoveAt(index);
            }
            return index >= 0;
        }

        /// <summary>
        /// Removes the item at the specified index from both the inner list and the outer list.
        /// </summary>
        /// <param name="index">The zero-based index of the item to remove.</param>
        /// <remarks>
        /// Both the inner list and the outer list are updated by removing the item at the specified index.
        /// </remarks>
        public void RemoveAt(int index)
        {
            _innerList.RemoveAt(index);
            _outerList.RemoveAt(index);
        }

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>An enumerator object.</returns>
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
        #endregion Implement IList<>

        /// <summary>
        /// Adds a collection of items to the current instance.
        /// </summary>
        /// <typeparam name="TOutModel">The type of items in the collection.</typeparam>
        /// <param name="collection">The collection of items to add.</param>
        public void AddRange(IEnumerable<TOutModel> collection)
        {
            foreach (var item in collection)
            {
                Add(item);
            }
        }
        #region Helper
        /// Converts the specified inner model to the default output model.
        /// @param model The inner model to convert.
        /// @return The default output model.
        protected virtual TOutModel ToDefaultOutModel(TInnerModel model)
        {
            var result = new TOutModel();

            result.CopyFrom(model);
            return result;
        }

        /// <summary>
        /// Converts a model of type <typeparamref name="TOutModel"/> to its default inner model of type <typeparamref name="TInnerModel"/>.
        /// </summary>
        /// <param name="model">The model to convert.</param>
        /// <returns>The default inner model.</returns>
        protected virtual TInnerModel ToDefaultInnerModel(TOutModel model)
        {
            var result = new TInnerModel();

            result.CopyFrom(model);
            return result;
        }
        #endregion Helper
    }
}
//MdEnd


