//@BaseCode
//MdStart
#if ACCOUNT_ON
namespace QuickTemplate.AspMvc.Controllers.Account
{
    using TAccessModel = Logic.Models.Account.Identity;
    using TViewModel = AspMvc.Models.Account.Identity;
    using TFilterModel = AspMvc.Models.Account.IdentityFilter;
    using TAccessContract = Logic.Contracts.Account.IIdentitiesAccess;
    using Microsoft.AspNetCore.Mvc;
    public partial class IdentitiesController : Controllers.FilterGenericController<TAccessModel, TViewModel, TFilterModel, TAccessContract>
    {
        ///
        /// Generated by the generator
        ///
        static IdentitiesController()
        {
            ClassConstructing();
            ClassConstructed();
        }
        static partial void ClassConstructing();
        static partial void ClassConstructed();
        protected override string ControllerName => "Identities";
        ///
        /// Generated by the generator
        ///
        public IdentitiesController(TAccessContract other)
        : base(other)
        {
            Constructing();
            Constructed();
        }
        partial void Constructing();
        partial void Constructed();
        ///
        /// Generated by the generator
        ///
        protected override TViewModel ToViewModel(TAccessModel accessModel, ActionMode actionMode)
        {
            var handled = false;
            var result = default(TViewModel);
            BeforeToViewModel(accessModel, actionMode, ref result, ref handled);
            if (handled == false || result == null)
            {
                result = TViewModel.Create(accessModel);
            }
            AfterToViewModel(result, actionMode);
            return BeforeView(result, actionMode);
        }
        partial void BeforeToViewModel(TAccessModel accessModel, ActionMode actionMode, ref TViewModel? viewModel, ref bool handled);
        partial void AfterToViewModel(TViewModel viewModel, ActionMode actionMode);

        public override IActionResult Create()
        {
            return View(new Models.Account.IdentityCreate());
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> CreateIdentity(Models.Account.IdentityCreate model)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    await Logic.AccountAccess.AddAppAccessAsync(SessionWrapper.SessionToken, model.Name, model.Email, model.Password, model.TimeOutInMinutes, false);

                    var entity = (await DataAccess.QueryAsync($"{nameof(model.Email)}=\"{model.Email}\"")).FirstOrDefault();

                    return entity == null ? RedirectToAction("Index") : RedirectToAction("Edit", new { id=entity.Id });
                }
                catch (Exception ex)
                {
                    ViewBag.Error = ex.Message;

                    if (ex.InnerException != null)
                    {
                        ViewBag.Error = ex.InnerException.Message;
                    }
                }
            }
            else
            {
                ViewBag.Error = string.Join("; ", ModelState.Values
                                      .SelectMany(x => x.Errors)
                                      .Select(x => x.ErrorMessage));
            }
            return View("Create", model);
        }
        // Extensions
        private Models.Account.IdentityRole[]? accessRoleList;
        public Models.Account.IdentityRole[] AccessRoleList
        {
            get
            {
                if (accessRoleList == null)
                {
                    var services = HttpContext.RequestServices;
                    using var ctrl = (Logic.Contracts.Account.IRolesAccess<Logic.Models.Account.Role>)services.GetService(typeof(Logic.Contracts.Account.IRolesAccess<Logic.Models.Account.Role>))!;

                    ctrl.SessionToken = SessionWrapper.SessionToken;

                    accessRoleList = Task.Run(async () => await ctrl.GetAllAsync("Designation asc")).Result.Select(e => Models.Account.IdentityRole.Create(e)).ToArray();
                }
                return accessRoleList;
            }
        }

        partial void AfterToViewModel(TViewModel viewModel, ActionMode actionMode)
        {
            if ((actionMode & ActionMode.EditAction) > 0)
            {
                viewModel.IdentityRoleList = AccessRoleList;

            }
        }

        public async Task<IActionResult> AddAccessRole(IdType id, IdType accessRoleId)
        {
            try
            {
                if (DataAccess is TAccessContract instanceAccess)
                {
                    await instanceAccess.AddRoleAsync(id, accessRoleId);
                    await instanceAccess.SaveChangesAsync();
                }
            }
            catch (Exception ex)
            {
                ViewBag.Error = ex.Message;

                if (ex.InnerException != null)
                {
                    ViewBag.Error = ex.InnerException.Message;
                }
            }
            return RedirectToAction("Edit", new { id });
        }
        public async Task<IActionResult> RemoveAccessRole(IdType id, IdType accessRoleId)
        {
            try
            {
                if (DataAccess is TAccessContract instanceAccess)
                {
                    await instanceAccess.RemoveRoleAsync(id, accessRoleId);
                    await instanceAccess.SaveChangesAsync();
                }
            }
            catch (Exception ex)
            {
                ViewBag.Error = ex.Message;

                if (ex.InnerException != null)
                {
                    ViewBag.Error = ex.InnerException.Message;
                }
            }
            return RedirectToAction("Edit", new { id });
        }
        // Extensions
    }
}
#endif
//MdEnd
