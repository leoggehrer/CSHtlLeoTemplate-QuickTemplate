//@BaseCode
//MdStart
#if ACCOUNT_ON
namespace QuickTemplate.AspMvc.Controllers.Account
{
    using TAccessModel = Logic.Models.Account.Role;
    using TViewModel = AspMvc.Models.Account.IdentityRole;
    using TFilterModel = AspMvc.Models.Account.IdentityRoleFilter;
    using TAccessContract = Logic.Contracts.Account.IRolesAccess;
    
    /// <summary>
    /// Represents a controller class for managing identity roles.
    /// </summary>
    /// <typeparam name="TAccessModel">The type of the access model.</typeparam>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    /// <typeparam name="TFilterModel">The type of the filter model.</typeparam>
    /// <typeparam name="TAccessContract">The type of the access contract.</typeparam>
    /// <remarks>
    /// This class is generated by the generator.
    /// </remarks>
    public partial class IdentityRolesController : Controllers.FilterGenericController<TAccessModel, TViewModel, TFilterModel, TAccessContract>
    {
        ///
        /// Generated by the generator
        ///
        static IdentityRolesController()
        {
            ClassConstructing();
            ClassConstructed();
        }
        /// <summary>
        /// Represents the method called before a class is constructed.
        /// </summary>
        /// <remarks>
        /// This method is intended to be used as a partial method declaration and should be implemented
        /// in a partial class with the same name as the containing class followed by the suffix "Extensions".
        /// </remarks>
        /// <seealso cref="ClassExtensions"/>
        static partial void ClassConstructing();
        /// <summary>
        /// This method is called when the class is constructed.
        /// </summary>
        /// <remarks>
        /// This method is a partial method, which means it may be implemented in another part of the class.
        /// </remarks>
        static partial void ClassConstructed();
        ///<summary>
        /// Gets the name of the controller.
        ///</summary>
        ///<value>
        /// The name of the controller.
        ///</value>
        protected override string ControllerName => "IdentityRoles";
        ///
        /// Generated by the generator
        ///
        public IdentityRolesController(TAccessContract other)
        : base(other)
        {
            Constructing();
            Constructed();
        }
        /// <summary>
        /// This method is called during the construction of the object.
        /// </summary>
        /// <remarks>
        /// Use this method to perform any custom logic or setup tasks that need to be executed during the construction process.
        /// Only methods defined in the same class can implement this method.
        /// </remarks>
        /// <returns>Nothing</returns>
        partial void Constructing();
        /// <summary>
        /// This method is a partial method that can be implemented in a partial class or a partial method definition in a base class.
        /// It is called when the object has been constructed.
        /// </summary>
        partial void Constructed();
        ///
        /// Generated by the generator
        ///
        protected override TViewModel ToViewModel(TAccessModel accessModel, ActionMode actionMode)
        {
            var handled = false;
            var result = default(TViewModel);
            BeforeToViewModel(accessModel, actionMode, ref result, ref handled);
            if (handled == false || result == null)
            {
                result = TViewModel.Create(accessModel);
            }
            AfterToViewModel(result, actionMode);
            return BeforeView(result, actionMode);
        }
        /// <summary>
        /// Executes before mapping the access model to the view model.
        /// </summary>
        /// <param name="accessModel">The access model to be mapped.</param>
        /// <param name="actionMode">The action mode of the operation.</param>
        /// <param name="viewModel">The view model to be mapped to.</param>
        /// <param name="handled">A flag indicating whether the operation has been handled.</param>
        partial void BeforeToViewModel(TAccessModel accessModel, ActionMode actionMode, ref TViewModel? viewModel, ref bool handled);
        /// <summary>
        /// Performs additional actions after converting the specified view model to another view model.
        /// </summary>
        /// <param name="viewModel">The view model that has been converted.</param>
        /// <param name="actionMode">The action mode performed during the conversion.</param>
        /// <remarks>
        /// This method is called after the conversion of a view model to another view model.
        /// It provides an opportunity to perform any additional actions or modifications to the view model based on the action mode.
        /// </remarks>
        /// <seealso cref="TViewModel"/>
        /// <seealso cref="ActionMode"/>
        partial void AfterToViewModel(TViewModel viewModel, ActionMode actionMode);
    }
}
#endif
//MdEnd
