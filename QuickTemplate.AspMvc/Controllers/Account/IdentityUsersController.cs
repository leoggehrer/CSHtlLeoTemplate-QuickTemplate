//@BaseCode
//MdStart
#if ACCOUNT_ON
namespace QuickTemplate.AspMvc.Controllers.Account
{
    using TAccessModel = Logic.Models.Account.User;
    using TViewModel = AspMvc.Models.Account.IdentityUser;
    using TFilterModel = AspMvc.Models.Account.IdentityUserFilter;
    using TAccessContract = Logic.Contracts.Account.IUsersAccess;
    
    using System.Diagnostics.Metrics;
    
    /// <summary>
    /// Represents a controller for managing identity users.
    /// </summary>
    /// <typeparam name="TAccessModel">The access model type.</typeparam>
    /// <typeparam name="TViewModel">The view model type.</typeparam>
    /// <typeparam name="TFilterModel">The filter model type.</typeparam>
    /// <typeparam name="TAccessContract">The access contract type.</typeparam>
    public partial class IdentityUsersController : Controllers.FilterGenericController<TAccessModel, TViewModel, TFilterModel, TAccessContract>
    {
        ///
        /// Generated by the generator
        ///
        static IdentityUsersController()
        {
            ClassConstructing();
            ClassConstructed();
        }
        /// <summary>
        /// This method is called when a class is being constructed.
        /// </summary>
        static partial void ClassConstructing();
        /// <summary>
        /// This method is called when a class is constructed.
        /// </summary>
        /// <remarks>
        /// This method is marked as 'partial' which means it can be implemented in multiple files.
        /// </remarks>
        /// <seealso cref="ClassName"/>
        /// <seealso cref="AnotherClass.ClassMethod"/>
        static partial void ClassConstructed();
        /// <summary>
        /// Gets the name of the controller for identity users.
        /// </summary>
        /// <value>
        /// The name of the controller for identity users.
        /// </value>
        protected override string ControllerName => "IdentityUsers";
        ///
        /// Generated by the generator
        ///
        public IdentityUsersController(TAccessContract other)
        : base(other)
        {
            Constructing();
            Constructed();
        }
        /// <summary>
        /// Represents a partial method that is called when the object is being constructed.
        /// </summary>
        /// <remarks>
        /// This method is called during the construction process of the object.
        /// It is intended to be overridden by derived classes to perform additional initialization or set specific values.
        /// </remarks>
        partial void Constructing();
        /// <summary>
        /// This method is called when the object is constructed, allowing custom initialization logic to be implemented in partial classes.
        /// </summary>
        ///
        /// <remarks>
        /// This method is declared as partial and can be implemented in separate files or classes in combination with other partial methods
        /// to provide additional logic during the construction of the object.
        /// </remarks>
        partial void Constructed();
        ///
        /// Generated by the generator
        ///
        protected override TViewModel ToViewModel(TAccessModel accessModel, ActionMode actionMode)
        {
            var handled = false;
            var result = default(TViewModel);
            BeforeToViewModel(accessModel, actionMode, ref result, ref handled);
            if (handled == false || result == null)
            {
                result = TViewModel.Create(accessModel);
            }
            AfterToViewModel(result, actionMode);
            return BeforeView(result, actionMode);
        }
        /// <summary>
        /// Performs any necessary operations before converting the specified access model to a view model.
        /// </summary>
        /// <param name="accessModel">The access model to be converted.</param>
        /// <param name="actionMode">The action mode indicating the current operation.</param>
        /// <param name="viewModel">The resulting view model, if any.</param>
        /// <param name="handled">A boolean value indicating whether the operation has been handled.</param>
        partial void BeforeToViewModel(TAccessModel accessModel, ActionMode actionMode, ref TViewModel? viewModel, ref bool handled);
        /// <summary>
        /// Performs additional operations after converting the given <paramref name="viewModel"/> to a view model object based on the specified <paramref name="actionMode"/>.
        /// </summary>
        /// <param name="viewModel">The view model object to be converted.</param>
        /// <param name="actionMode">The action mode indicating the current action being performed.</param>
        /// <remarks>
        /// This method allows performing any necessary operations after converting the <paramref name="viewModel"/> object to a view model based on the specified <paramref name="actionMode"/>.
        /// This can be used to implement any additional logic or workflows required after the conversion.
        /// The <paramref name="viewModel"/> object represents the converted view model.
        /// The <paramref name="actionMode"/> parameter indicates the current action being performed, such as Add, Edit, Delete, etc.
        /// </remarks>
        partial void AfterToViewModel(TViewModel viewModel, ActionMode actionMode);
        
        // Extensions
        private Models.Account.Identity[]? identityList;
        /// <summary>
        /// Gets the list of identities associated with the account.
        /// </summary>
        /// <returns>An array of identity objects.</returns>
        public Models.Account.Identity[] IdentityList
        {
            get
            {
                if (identityList == null)
                {
                    var services = HttpContext.RequestServices;
                    using var ctrl = (Logic.Contracts.Account.IIdentitiesAccess)services.GetService(typeof(Logic.Contracts.Account.IIdentitiesAccess))!;
                    
                    ctrl.SessionToken = SessionWrapper.SessionToken;
                    
                    identityList = Task.Run(async () => await ctrl.GetAllAsync("Email asc")).Result.Select(e => Models.Account.Identity.Create(e)).ToArray();
                }
                return identityList;
            }
        }
        
        /// <summary>
        /// Updates the specified viewModel with additional properties after converting it to a view model.
        /// </summary>
        /// <param name="viewModel">The converted view model.</param>
        /// <param name="actionMode">The action mode for the update.</param>
        partial void AfterToViewModel(Models.Account.IdentityUser viewModel, ActionMode actionMode)
        {
            viewModel.IdentityList = IdentityList;
            viewModel.IdentityEmail = IdentityList.FirstOrDefault(e => e.Id == viewModel.IdentityId)?.Email ?? string.Empty;
        }
        // Extensions
    }
}
#endif
//MdEnd

