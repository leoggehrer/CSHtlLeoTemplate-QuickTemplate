//@BaseCode
//MdStart
#if ACCOUNT_ON
namespace QuickTemplate.WebApi.Controllers.Account
{
    using TAccessModel = Logic.Models.Account.Role;
    using TEditModel = WebApi.Models.Account.IdentityRoleEdit;
    using TOutModel = WebApi.Models.Account.IdentityRole;
    ///
    /// Generated by the generator
    ///
    public sealed partial class IdentityRolesController : Controllers.GenericController<TAccessModel, TEditModel, TOutModel>
    {
        ///
        /// Generated by the generator
        ///
        static IdentityRolesController()
        {
            ClassConstructing();
            ClassConstructed();
        }
        /// <summary>
        /// Represents a method that is called before a class is constructed.
        /// </summary>
        /// <remarks>
        /// This method is used in partial classes, where it allows additional
        /// code to be executed before the constructor of the class is called.
        /// </remarks>
        /// <seealso cref="PartialClasses"/>
        static partial void ClassConstructing();
        /// <summary>
        /// This method is called when an instance of the class is constructed.
        /// </summary>
        static partial void ClassConstructed();
        ///
        /// Generated by the generator
        ///
        public IdentityRolesController(Logic.Contracts.Account.IRolesAccess other)
        : base(other)
        {
            Constructing();
            Constructed();
        }
        /// <summary>
        /// This method is called when the object is being constructed.
        /// </summary>
        /// <remarks>
        /// This method can be implemented in partial classes to perform additional actions during object construction.
        /// </remarks>
        /// <seealso cref="YourClassName"/>
        partial void Constructing();
        /// <summary>
        /// Represents a method that is called when an object is constructed.
        /// </summary>
        /// <remarks>
        /// This method is only partially implemented and should be completed in the derived class.
        /// </remarks>
        partial void Constructed();
        ///
        /// Generated by the generator
        ///
        protected override TOutModel ToOutModel(TAccessModel accessModel)
        {
            var handled = false;
            var result = default(TOutModel);
            BeforeToOutModel(accessModel, ref result, ref handled);
            if (handled == false || result == null)
            {
                result = TOutModel.Create(accessModel);
            }
            AfterToOutModel(result);
            return result;
        }
        /// <summary>
        /// Executes before converting the access model to the output model.
        /// </summary>
        /// <param name="accessModel">The access model to be converted.</param>
        /// <param name="outModel">The output model to be modified.</param>
        /// <param name="handled">Indicates whether the method has been handled.</param>
        /// <remarks>
        /// This method is called before converting the access model to the output model.
        /// It allows making modifications to the output model before the conversion process.
        /// </remarks>
        partial void BeforeToOutModel(TAccessModel accessModel, ref TOutModel? outModel, ref bool handled);
        /// <summary>
        /// Triggers after converting the instance to the <paramref name="outModel"/>.
        /// </summary>
        /// <param name="outModel">The converted output model.</param>
        partial void AfterToOutModel(TOutModel outModel);
    }
}
#endif
//MdEnd
