//@BaseCode
//MdStart
#if ACCOUNT_ON
namespace QuickTemplate.WebApi.Controllers.Account
{
    using TAccessModel = Logic.Models.Account.User;
    using TEditModel = WebApi.Models.Account.IdentityUserEdit;
    using TOutModel = WebApi.Models.Account.IdentityUser;
    ///
    /// Generated by the generator
    ///
    public sealed partial class IdentityUsersController : Controllers.GenericController<TAccessModel, TEditModel, TOutModel>
    {
        ///
        /// Generated by the generator
        ///
        static IdentityUsersController()
        {
            ClassConstructing();
            ClassConstructed();
        }
        /// <summary>
        /// This method is called when the class is being constructed.
        /// </summary>
        static partial void ClassConstructing();
        /// <summary>
        /// Represents a partial method that is called when an instance of the class is constructed.
        /// </summary>
        /// <remarks>
        /// This partial method can be implemented in a partial class to perform custom initialization for the instance of the class.
        /// </remarks>
        static partial void ClassConstructed();
        ///
        /// Generated by the generator
        ///
        public IdentityUsersController(Logic.Contracts.Account.IUsersAccess other)
        : base(other)
        {
            Constructing();
            Constructed();
        }
        /// <summary>
        /// This method is called during the construction of an object.
        /// It can be overridden in a partial class to perform additional setup operations.
        /// </summary>
        /// <remarks>
        /// This method is defined as partial, which means it can be implemented in multiple
        /// source files, as long as the signature remains the same. Each implementation will
        /// be called during the construction process.
        /// </remarks>
        partial void Constructing();
        /// <summary>
        /// This method is called when the object has been constructed and fully initialized.
        /// </summary>
        /// <remarks>
        /// This method is intended to be overridden by subclasses to perform additional initialization tasks.
        /// </remarks>
        partial void Constructed();
        ///
        /// Generated by the generator
        ///
        protected override TOutModel ToOutModel(TAccessModel accessModel)
        {
            var handled = false;
            var result = default(TOutModel);
            BeforeToOutModel(accessModel, ref result, ref handled);
            if (handled == false || result == null)
            {
                result = TOutModel.Create(accessModel);
            }
            AfterToOutModel(result);
            return result;
        }
        /// <summary>
        /// This method is called before converting the access model to an out model.
        /// </summary>
        /// <param name="accessModel">The access model to be converted.</param>
        /// <param name="outModel">The converted out model, if successful.</param>
        /// <param name="handled">Indicates whether the conversion has been handled.</param>
        partial void BeforeToOutModel(TAccessModel accessModel, ref TOutModel? outModel, ref bool handled);
        /// <summary>
        /// This method is invoked after the conversion of the input model to the output model.
        /// </summary>
        /// <param name="outModel">The converted output model.</param>
        partial void AfterToOutModel(TOutModel outModel);
    }
}
#endif
//MdEnd
